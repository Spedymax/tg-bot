import schedule
import time
import logging
import threading
from datetime import datetime, timezone
from typing import Dict, Any
from config.settings import Settings
from services.trivia_service import TriviaService
from telebot import types

logger = logging.getLogger(__name__)


class QuizScheduler:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∏–∑–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    
    def __init__(self, bot, db_manager, trivia_service: TriviaService):
        self.bot = bot
        self.db_manager = db_manager
        self.trivia_service = trivia_service
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–≤–∏–∑–æ–≤ - 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
        self.quiz_times = ["10:00", "15:00", "20:00"]
        
        # ID —á–∞—Ç–∞ —Å –¥—Ä—É–∑—å—è–º–∏ (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        self.target_chat_id = Settings.CHAT_IDS['main']  # –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.is_running = False
        self.scheduler_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.setup_schedule()
        
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∏–∑–æ–≤."""
        logger.info("Setting up quiz schedule...")
        
        for quiz_time in self.quiz_times:
            schedule.every().day.at(quiz_time).do(self.send_scheduled_quiz)
            logger.info(f"Quiz scheduled at {quiz_time}")
    
    def send_scheduled_quiz(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–≤–∏–∑–∞."""
        try:
            current_time = datetime.now(timezone.utc).strftime('%H:%M')
            logger.info(f"Sending scheduled quiz at {current_time}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–∏–∑
            self.send_quiz_to_chat(self.target_chat_id)
            
        except Exception as e:
            logger.error(f"Error in send_scheduled_quiz: {e}")
    
    def send_quiz_to_chat(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–≤–∏–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            question_data = self._generate_question()
            
            if not question_data:
                logger.error("Failed to generate question")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–∏–∑ –≤ —á–∞—Ç
            self._send_quiz_message(chat_id, question_data)
            
        except Exception as e:
            logger.error(f"Error sending quiz to chat {chat_id}: {e}")
    
    def _generate_question(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."""
        try:
            max_attempts = 5
            
            for attempt in range(max_attempts):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ TriviaService
                question = self.trivia_service.generate_question_with_ai()
                
                if question:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                    if not self.trivia_service.is_duplicate_question(question.question, question.correct_answer):
                        return {
                            "question": question.question,
                            "answer": question.correct_answer,
                            "explanation": question.explanation,
                            "wrong_answers": question.wrong_answers
                        }
                    else:
                        logger.info(f"Attempt {attempt + 1}: Generated duplicate question, trying again...")
                        continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
            logger.warning("All attempts failed, using fallback question")
            return self._get_fallback_question()
            
        except Exception as e:
            logger.error(f"Error generating question: {e}")
            return self._get_fallback_question()
    
    def _get_fallback_question(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π."""
        import random
        
        fallback_questions = [
            {
                "question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ?",
                "answer": "–≠–≤–µ—Ä–µ—Å—Ç",
                "explanation": "–≠–≤–µ—Ä–µ—Å—Ç (–î–∂–æ–º–æ–ª—É–Ω–≥–º–∞) - —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ, –µ—ë –≤—ã—Å–æ—Ç–∞ 8848 –º–µ—Ç—Ä–æ–≤.",
                "wrong_answers": ["–ö–∏–ª–∏–º–∞–Ω–¥–∂–∞—Ä–æ", "–≠–ª—å–±—Ä—É—Å", "–ú–æ–Ω–±–ª–∞–Ω"]
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?",
                "answer": "7",
                "explanation": "–ù–∞ –ó–µ–º–ª–µ 7 –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤: –ê–∑–∏—è, –ê—Ñ—Ä–∏–∫–∞, –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞, –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞, –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞, –ï–≤—Ä–æ–ø–∞ –∏ –û–∫–µ–∞–Ω–∏—è.",
                "wrong_answers": ["5", "6", "8"]
            },
            {
                "question": "–ö–∞–∫–æ–π –≥–∞–∑ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ó–µ–º–ª–∏?",
                "answer": "–ê–∑–æ—Ç",
                "explanation": "–ê–∑–æ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 78% –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ó–µ–º–ª–∏, –∫–∏—Å–ª–æ—Ä–æ–¥ - –æ–∫–æ–ª–æ 21%.",
                "wrong_answers": ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "–í–æ–¥–æ—Ä–æ–¥"]
            }
        ]
        
        return random.choice(fallback_questions)
    
    def _send_quiz_message(self, chat_id: int, question_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–≤–∏–∑–æ–º."""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            answer_options = [question_data["answer"]] + question_data["wrong_answers"][:3]
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            import random
            random.shuffle(answer_options)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            
            for index, answer in enumerate(answer_options):
                button = types.InlineKeyboardButton(
                    text=answer,
                    callback_data=f"ans_{index}"
                )
                markup.add(button)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id,
                "üß† –í—Ä–µ–º—è –∫–≤–∏–∑–∞! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è!",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            question_msg = self.bot.send_message(
                chat_id,
                question_data["question"],
                reply_markup=markup,
                parse_mode='HTML',
                protect_content=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
            self._save_question_state(question_msg.message_id, question_data, answer_options)
            
            logger.info(f"Quiz sent to chat {chat_id}, message_id: {question_msg.message_id}")
            
        except Exception as e:
            logger.error(f"Error sending quiz message: {e}")
    
    def _save_question_state(self, message_id: int, question_data: Dict[str, Any], answer_options: list):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            connection = self.db_manager.get_connection()
            
            try:
                with connection.cursor() as cursor:
                    import json
                    answer_options_str = json.dumps(answer_options)
                    current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    
                    cursor.execute(
                        "INSERT INTO questions (question, correct_answer, answer_options, date_added, explanation) VALUES (%s, %s, %s, %s, %s)",
                        (question_data["question"], question_data["answer"], answer_options_str, current_date, question_data["explanation"])
                    )
                    connection.commit()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
                    question_state_data = {
                        "text": question_data["question"],
                        "players_responses": {},
                        "options": answer_options
                    }
                    
                    cursor.execute(
                        "INSERT INTO question_state (message_id, original_question, players_responses) VALUES (%s, %s, %s)",
                        (message_id, question_data["question"], json.dumps(question_state_data))
                    )
                    connection.commit()
                    
            finally:
                self.db_manager.release_connection(connection)
            
        except Exception as e:
            logger.error(f"Error saving question state: {e}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self.is_running:
            logger.warning("Scheduler is already running")
            return
        
        self.is_running = True
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        logger.info("Quiz scheduler started")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.is_running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        
        logger.info("Quiz scheduler stopped")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"Error in scheduler loop: {e}")
                time.sleep(60)
    
    def manual_quiz(self, chat_id: int = None) -> Dict[str, Any]:
        """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–≤–∏–∑–∞."""
        try:
            target_chat = chat_id if chat_id else self.target_chat_id
            self.send_quiz_to_chat(target_chat)
            
            return {
                "success": True,
                "message": f"Quiz sent to chat {target_chat}"
            }
            
        except Exception as e:
            logger.error(f"Error in manual quiz: {e}")
            return {
                "success": False,
                "message": f"Error sending quiz: {str(e)}"
            }
    
    def get_schedule_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
        try:
            next_run_time = schedule.next_run()
            
            return {
                "quiz_times": self.quiz_times,
                "target_chat_id": self.target_chat_id,
                "is_running": self.is_running,
                "next_run": next_run_time.strftime('%Y-%m-%d %H:%M:%S') if next_run_time else "Not scheduled"
            }
            
        except Exception as e:
            logger.error(f"Error getting schedule info: {e}")
            return {
                "quiz_times": self.quiz_times,
                "target_chat_id": self.target_chat_id,
                "is_running": self.is_running,
                "next_run": "Error"
            }
    
    def update_schedule(self, new_times: list):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞
            self.quiz_times = new_times
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            self.setup_schedule()
            
            logger.info(f"Quiz schedule updated to: {new_times}")
            return True
            
        except Exception as e:
            logger.error(f"Error updating schedule: {e}")
            return False
