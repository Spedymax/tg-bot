import random
import time
from telebot import types
from config.game_config import GameConfig
from config.settings import Settings
from services.telegram_error_handler import TelegramErrorHandler, telegram_error_handler

class GameHandlers:
    def __init__(self, bot, player_service, game_service):
        self.bot = bot
        self.player_service = player_service
        self.game_service = game_service
        
    def setup_handlers(self):
        """Setup all game-related command handlers"""
        
        @self.bot.message_handler(commands=['pisunchik'])
        @telegram_error_handler("pisunchik_command")
        def pisunchik_command(message):
            """Handle /pisunchik command"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                TelegramErrorHandler.safe_reply_to(self.bot, message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            result = self.game_service.execute_pisunchik_command(player)
            
            if not result['success']:
                TelegramErrorHandler.safe_reply_to(self.bot, message, result['message'])
                return
            
            reply_message = (
                f"–í–∞—à –ø–∏—Å—é–Ω—á–∏–∫: {result['new_size']} —Å–º\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è: {result['size_change']} —Å–º\n"
                f"–¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏: {result['coins_change']} BTC"
            )
            
            for effect in result['effects']:
                reply_message += f"\n{effect}"
            
            TelegramErrorHandler.safe_reply_to(self.bot, message, reply_message)
        
        @self.bot.message_handler(commands=['kazik'])
        def casino_command(message):
            """Handle /kazik command"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫")
                return
            
            result = self.game_service.execute_casino_command(player)
            
            if not result['success']:
                self.bot.reply_to(message, result['message'])
                return
            
            if result.get('send_dice'):
                # Send 6 casino dice one by one
                dice_results = []
                total_wins = 0
                
                for i in range(6):
                    dice_msg = self.bot.send_dice(message.chat.id, emoji='üé∞')
                    dice_value = dice_msg.dice.value
                    dice_results.append(dice_value)
                    
                    # Check if this dice is a winning value
                    if dice_value in GameConfig.CASINO_JACKPOT_VALUES:
                        total_wins += 1
                        player.add_coins(GameConfig.CASINO_JACKPOT_REWARD)
                        time.sleep(2)  # Dramatic pause
                        self.bot.send_message(message.chat.id, f"üé∞ –î–ñ–ï–ö–ü–û–¢ –ï–ë–ê–¢–¨! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {GameConfig.CASINO_JACKPOT_REWARD} BTC!")
                    
                    if i < 5:  # Don't sleep after the last dice
                        time.sleep(1)  # Small delay between dice
                
                # Save player with updated coins

                self.player_service.save_player(player)
                self.bot.send_message(message.chat.id, f"üéâ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_wins}! –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_wins * GameConfig.CASINO_JACKPOT_REWARD} BTC!")

        
        @self.bot.message_handler(commands=['roll'])
        def roll_command(message):
            """Handle /roll command with inline keyboard"""
            keyboard = self.create_roll_keyboard()
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫:", reply_markup=keyboard)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('roll_'))
        def handle_roll_callback(call):
            """Handle roll option selection"""
            rolls = int(call.data.split('_')[1])
            player_id = call.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫")
                return
            
            result = self.game_service.execute_roll_command(player, rolls)
            
            if not result['success']:
                self.bot.send_message(call.message.chat.id, result['message'])
                return
            
            self.bot.send_message(call.message.chat.id, f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {result['cost']} BTC")
            self.bot.send_message(call.message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤: {' '.join(map(str, result['results']))}")
            self.bot.send_message(call.message.chat.id, f"–í–∞—à –ø–∏—Å—é–Ω—á–∏–∫: {result['new_size']} —Å–º")
            
            if result['jackpots'] > 0:
                for i in range(result['jackpots']):
                    time.sleep(2)
                    if i >= 1:
                        self.bot.send_message(call.message.chat.id, "–ß–¢–û? –ï–©–ï –û–î–ò–ù?")
                        time.sleep(2)
                    self.bot.send_message(call.message.chat.id, "üÜòü§ë–ë–û–ì –¢–´ –ú–û–ô! –¢–´ –í–´–ò–ì–†–ê–õ –î–ñ–ï–ö–ü–û–¢! 400 BTC –¢–ï–ë–ï –ù–ê –°–ß–ï–¢!ü§ëüÜò")
        
        @self.bot.message_handler(commands=['vor'])
        def theft_command(message):
            """Handle /vor command"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫")
                return
            
            can_steal, error_message = self.game_service.can_steal(player)
            if not can_steal:
                self.bot.reply_to(message, error_message)
                return
            
            # Create theft target selection based on player ID
            markup = types.InlineKeyboardMarkup()
            
            # This is simplified - you'd need to add proper target selection logic
            if str(player_id) == "742272644":  # Yura
                markup.add(types.InlineKeyboardButton("–ú–∞–∫—Å", callback_data="vor_max"))
                markup.add(types.InlineKeyboardButton("–ë–æ–≥–¥–∞–Ω", callback_data="vor_bogdan"))
            elif str(player_id) == "741542965":  # Max
                markup.add(types.InlineKeyboardButton("–Æ—Ä–∞", callback_data="vor_yura"))
                markup.add(types.InlineKeyboardButton("–ë–æ–≥–¥–∞–Ω", callback_data="vor_bogdan"))
            elif str(player_id) == "855951767":  # Bogdan
                markup.add(types.InlineKeyboardButton("–ú–∞–∫—Å", callback_data="vor_max"))
                markup.add(types.InlineKeyboardButton("–Æ—Ä–∞", callback_data="vor_yura"))
            
            self.bot.send_message(
                message.chat.id,
                f"<a href='tg://user?id={player_id}'>@{message.from_user.username}</a>, —É –∫–æ–≥–æ –∫—Ä–∞–¥—ë–º —á–ª–µ–Ω?",
                reply_markup=markup,
                parse_mode='html'
            )
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("vor_"))
        def handle_theft_callback(call):
            """Handle theft target selection"""
            target = call.data.split("_")[1]
            player_id = call.from_user.id
            
            # Map targets to player IDs
            target_ids = {
                "yura": 742272644,
                "max": 741542965,
                "bogdan": 855951767
            }
            
            if target not in target_ids:
                self.bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å –¥–ª—è –∫—Ä–∞–∂–∏")
                return
            
            thief = self.player_service.get_player(player_id)
            victim = self.player_service.get_player(target_ids[target])
            
            if not thief or not victim:
                self.bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            result = self.game_service.execute_theft(thief, victim)
            
            if not result['success']:
                self.bot.send_message(call.message.chat.id, result['message'])
                return
            
            self.bot.send_message(call.message.chat.id, f"–í—ã —É–∫—Ä–∞–ª–∏ {result['amount']} —Å–º —É {result['victim_name']}...")
        
        @self.bot.message_handler(commands=['smazka'])
        def reset_cooldown_command(message):
            """Handle /smazka command to reset pisunchik cooldown"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫")
                return
            
            if not player.has_item('smazka'):
                self.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ 'smazka'(")
                return
            
            from datetime import datetime, timezone
            player.last_used = datetime(2000, 1, 1, tzinfo=timezone.utc)
            player.remove_item('smazka')
            
            self.player_service.save_player(player)
            self.bot.reply_to(message, "–ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pisunchik —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞.")
        
        @self.bot.message_handler(commands=['krystalnie_ballzzz'])
        def crystal_balls_command(message):
            """Handle /krystalnie_ballzzz command"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫.")
                return
            
            if not player.has_item('krystalnie_ballzzz'):
                self.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–∞ 'krystalnie_ballzzz'.")
                return
            
            if player.ballzzz_number is None:
                next_effect = random.randint(GameConfig.PISUNCHIK_MIN_CHANGE, GameConfig.PISUNCHIK_MAX_CHANGE)
                player.ballzzz_number = next_effect
                self.player_service.save_player(player)
            
            self.bot.reply_to(message, f"–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∏—Å—é–Ω—á–∏–∫–∞ –±—É–¥–µ—Ç: {player.ballzzz_number} —Å–º.")
        
        @self.bot.message_handler(commands=['masturbator'])
        def masturbator_command(message):
            """Handle /masturbator command"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫")
                return
            
            if not player.has_item('masturbator'):
                self.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–∞ 'masturbator'")
                return
            
            self.bot.send_message(
                message.chat.id,
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —á–∞—Å—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Å—é–Ω—á–∏–∫–∞ —Ä–∞–¥–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ë–¢–°. "
                "–ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω, —Ç–µ–º –±–æ–ª—å—à–µ BTC –≤—ã–∏–≥—Ä–∞–Ω–æ. "
                "1 —Å–º = 4 –ë–¢–° + 5 –ë–¢–° –∑–∞ –∫–∞–∂–¥—ã–µ 5 —Å–º.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:"
            )
            self.bot.register_next_step_handler(message, lambda msg: self.handle_masturbator_input(msg, player))
        
        @self.bot.message_handler(commands=['zelie_pisunchika'])
        def potion_command(message):
            """Handle /zelie_pisunchika command"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)

            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫.")
                return

            if not player.has_item('zelie_pisunchika'):
                self.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–∞ 'zelie_pisunchika'.")
                return

            # 50% chance to increase or decrease
            is_increase = random.choice([True, False])
            amount = 20

            if is_increase:
                player.pisunchik_size += amount
                effect_message = f"–í–∞—à –ø–∏—Å—é–Ω—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {amount} —Å–º."
            else:
                player.pisunchik_size -= amount
                effect_message = f"–í–∞—à –ø–∏—Å—é–Ω—á–∏–∫ —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {amount} —Å–º."

            player.remove_item('zelie_pisunchika')
            self.player_service.save_player(player)

            self.bot.reply_to(message, effect_message)

        # Potion commands
        @self.bot.message_handler(commands=['pisunchik_potion_small'])
        def small_potion_command(message):
            self.handle_potion_command(message, 'small', 3)

        @self.bot.message_handler(commands=['pisunchik_potion_medium'])
        def medium_potion_command(message):
            self.handle_potion_command(message, 'medium', 5)

        @self.bot.message_handler(commands=['pisunchik_potion_large'])
        def large_potion_command(message):
            self.handle_potion_command(message, 'large', 10)
        
    def handle_masturbator_input(self, message, player):
        """Handle masturbator donation amount input"""
        try:
            donation_amount = int(message.text)
            result = self.game_service.use_masturbator(player, donation_amount)
            
            if not result['success']:
                self.bot.reply_to(message, result['message'])
                return
            
            self.bot.reply_to(
                message,
                f"–í—ã –∑–∞–¥–æ–Ω–∞—Ç–∏–ª–∏ {result['donated']} —Å–º –≤–∞—à–µ–≥–æ –ø–∏—Å—é–Ω—á–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ {result['coins_received']} –ë–¢–° –≤–∑–∞–º–µ–Ω"
            )
        except ValueError:
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    def handle_potion_command(self, message, size, increase_amount):
        """Handle potion commands"""
        player_id = message.from_user.id
        player = self.player_service.get_player(player_id)
        
        if not player:
            self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫.")
            return
        
        potion_name = f'pisunchik_potion_{size}'
        if not player.has_item(potion_name):
            self.bot.reply_to(message, f"–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–∞ '{potion_name}'.")
            return
        
        player.pisunchik_size += increase_amount
        player.remove_item(potion_name)
        
        self.player_service.save_player(player)
        self.bot.reply_to(message, f"Your pisunchik size increased by {increase_amount} cm.")
    
    def create_roll_keyboard(self):
        """Create inline keyboard for roll command"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton(text='1', callback_data='roll_1'),
            types.InlineKeyboardButton(text='3', callback_data='roll_3')
        )
        keyboard.row(
            types.InlineKeyboardButton(text='5', callback_data='roll_5'),
            types.InlineKeyboardButton(text='10', callback_data='roll_10')
        )
        keyboard.row(
            types.InlineKeyboardButton(text='20', callback_data='roll_20'),
            types.InlineKeyboardButton(text='50', callback_data='roll_50')
        )
        keyboard.row(
            types.InlineKeyboardButton(text='100', callback_data='roll_100')
        )
        return keyboard
