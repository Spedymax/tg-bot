from telebot import types
from config.settings import Settings
import json
from datetime import datetime
import socket
from struct import pack

class AdminHandlers:
    def __init__(self, bot, player_service, game_service):
        self.bot = bot
        self.player_service = player_service
        self.game_service = game_service
        self.admin_actions = {}
        self.quiz_scheduler = None  # Will be set by main.py
        
    def set_quiz_scheduler(self, quiz_scheduler):
        """Set the quiz scheduler instance"""
        self.quiz_scheduler = quiz_scheduler
        
    def wake_on_lan(self, mac_address, broadcast_ip='255.255.255.255'):
        """Send a Wake-on-LAN packet to wake up a computer"""
        try:
            # Remove separators from MAC address
            mac_address = mac_address.replace(':', '').replace('-', '')
            
            # Create WOL packet
            magic_packet = b'\xff' * 6 + bytes.fromhex(mac_address) * 16
            
            # Send a packet
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
            sock.sendto(magic_packet, (broadcast_ip, 9))
            sock.close()
            
            return True
        except Exception as e:
            print(f"Wake-on-LAN error: {e}")
            return False
        
    def setup_handlers(self):
        """Setup all admin command handlers"""
        
        @self.bot.message_handler(commands=['admin'])
        def admin_panel(message):
            """Handle admin panel command"""
            if message.from_user.id in Settings.ADMIN_IDS:
                # Create an inline keyboard for the admin panel with categories
                markup = types.InlineKeyboardMarkup(row_width=2)
                
                # Main categories
                player_management = types.InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="admin_playerManagement")
                economy = types.InlineKeyboardButton("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="admin_economy")
                items = types.InlineKeyboardButton("üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="admin_items")
                system = types.InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
                
                markup.add(player_management, economy, items, system)
                
                self.bot.send_message(message.chat.id, "üéÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            else:
                self.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
        def handle_admin_categories(call):
            """Handle admin category selection"""
            if call.from_user.id in Settings.ADMIN_IDS:
                category = call.data.split("_")[1]
                markup = types.InlineKeyboardMarkup(row_width=2)
                
                if category == "playerManagement":
                    # Player management options
                    buttons = [
                        types.InlineKeyboardButton("‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –ø–∏—Å—é–Ω—á–∏–∫", callback_data="action_increasePisunchik"),
                        types.InlineKeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –ø–∏—Å—é–Ω—á–∏–∫", callback_data="action_decreasePisunchik"),
                        types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω", callback_data="action_resetCooldown"),
                        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞", callback_data="action_playerStats"),
                        types.InlineKeyboardButton("üß† –ò–∑–º–µ–Ω–∏—Ç—å –æ—á–∫–∏ –∫–≤–∏–∑–∞", callback_data="action_quizPoints"),
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]
                    markup.add(*buttons)
                    
                    self.bot.edit_message_text(
                        "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        call.message.chat.id, 
                        call.message.message_id, 
                        reply_markup=markup
                    )
                    
                elif category == "economy":
                    # Economy management options
                    buttons = [
                        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å BTC", callback_data="action_increaseBtc"),
                        types.InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å BTC", callback_data="action_decreaseBtc"),
                        types.InlineKeyboardButton("üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏", callback_data="action_manageStocks"),
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]
                    markup.add(*buttons)
                    self.bot.edit_message_text("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            call.message.chat.id, 
                                            call.message.message_id, 
                                            reply_markup=markup)
                    
                elif category == "items":
                    # Item management options
                    buttons = [
                        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="action_addItem"),
                        types.InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="action_removeItem"),
                        types.InlineKeyboardButton("üèÜ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—ç—Ç–∫—É", callback_data="action_addStatue"),
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]
                    markup.add(*buttons)
                    self.bot.edit_message_text("üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            call.message.chat.id, 
                                            call.message.message_id, 
                                            reply_markup=markup)
                    
                elif category == "system":
                    # System management options
                    buttons = [
                        types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", callback_data="action_restartBot"),
                        types.InlineKeyboardButton("üíæ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö", callback_data="action_backupData"),
                        types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="action_broadcast"),
                        types.InlineKeyboardButton("üíª –í–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="action_wakePc"),
                        types.InlineKeyboardButton("üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞–º–∏", callback_data="admin_quizManagement"),
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]
                    markup.add(*buttons)
                    self.bot.edit_message_text("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            call.message.chat.id, 
                                            call.message.message_id, 
                                            reply_markup=markup)
                    
                elif category == "quizManagement":
                    # Quiz management options
                    buttons = [
                        types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="action_startQuizScheduler"),
                        types.InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="action_stopQuizScheduler"),
                        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", callback_data="action_quizSchedulerStatus"),
                        types.InlineKeyboardButton("üéØ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏–∑ —Å–µ–π—á–∞—Å", callback_data="action_sendQuizNow"),
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_system")
                    ]
                    markup.add(*buttons)
                    self.bot.edit_message_text("üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            call.message.chat.id, 
                                            call.message.message_id, 
                                            reply_markup=markup)
                    
                elif category == "back":
                    # Return to main admin panel
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    player_management = types.InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="admin_playerManagement")
                    economy = types.InlineKeyboardButton("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="admin_economy")
                    items = types.InlineKeyboardButton("üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="admin_items")
                    system = types.InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
                    markup.add(player_management, economy, items, system)
                    
                    self.bot.edit_message_text("üéÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                            call.message.chat.id, 
                                            call.message.message_id, 
                                            reply_markup=markup)
            else:
                self.bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("action_"))
        def handle_admin_actions(call):
            """Handle admin action selection"""
            if call.from_user.id in Settings.ADMIN_IDS:
                action = call.data.split("_")[1]

                if action == "wakePc":
                    try:
                        self.bot.edit_message_text(
                            "–û—Ç–ø—Ä–∞–≤–ª—è—é Wake-on-LAN –ø–∞–∫–µ—Ç –Ω–∞ –≤–∞—à –ü–ö...",
                            call.message.chat.id,
                            call.message.message_id
                        )
                        result = self.wake_on_lan('D8:43:AE:BD:2B:F1')
                        if result:
                            self.bot.edit_message_text(
                                "‚úÖ Wake-on-LAN –ø–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–∞—à –ü–ö –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∏—Ç—å—Å—è.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                        else:
                            self.bot.edit_message_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Wake-on-LAN –ø–∞–∫–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                    except Exception as e:
                        self.bot.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                            call.message.chat.id,
                            call.message.message_id
                        )

                if action == "backupData":
                    # Create data backup
                    try:
                        all_players = self.player_service.get_all_players()
                        backup_time = datetime.now().strftime("%Y%m%d_%H%M%S")
                        backup_filename = f"backup_{backup_time}.json"

                        # Convert player objects to dictionaries for JSON serialization
                        backup_data = {}
                        for player_id, player in all_players.items():
                            backup_data[str(player_id)] = player.to_db_dict()

                        with open(backup_filename, 'w', encoding='utf-8') as f:
                            json.dump(backup_data, f, ensure_ascii=False, indent=4, default=str)

                        self.bot.edit_message_text(
                            f"‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {backup_filename}",
                            call.message.chat.id,
                            call.message.message_id
                        )
                    except Exception as e:
                        self.bot.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}",
                            call.message.chat.id,
                            call.message.message_id
                        )

                elif action == "broadcast":
                    self.admin_actions[call.from_user.id] = {"action": "broadcast"}
                    self.bot.edit_message_text(
                        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º:",
                        call.message.chat.id,
                        call.message.message_id
                    )
                
                # Quiz management actions
                elif action == "startQuizScheduler":
                    try:
                        if hasattr(self, 'quiz_scheduler'):
                            self.quiz_scheduler.start_scheduler()
                            self.bot.edit_message_text(
                                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–∏–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω!\n\n"
                                "–ö–≤–∏–∑—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 10:00, 15:00 –∏ 20:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                        else:
                            self.bot.edit_message_text(
                                "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–∏–∑–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                    except Exception as e:
                        self.bot.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}",
                            call.message.chat.id,
                            call.message.message_id
                        )
                
                elif action == "stopQuizScheduler":
                    try:
                        if hasattr(self, 'quiz_scheduler'):
                            self.quiz_scheduler.stop_scheduler()
                            self.bot.edit_message_text(
                                "‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–∏–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                        else:
                            self.bot.edit_message_text(
                                "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–∏–∑–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                    except Exception as e:
                        self.bot.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}",
                            call.message.chat.id,
                            call.message.message_id
                        )
                
                elif action == "quizSchedulerStatus":
                    try:
                        if hasattr(self, 'quiz_scheduler'):
                            status_info = self.quiz_scheduler.get_schedule_info()
                            status_text = f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–≤–∏–∑–æ–≤:\n\n"
                            status_text += f"üìç –°—Ç–∞—Ç—É—Å: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if status_info['is_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                            status_text += f"‚è∞ –í—Ä–µ–º—è –∫–≤–∏–∑–æ–≤: {', '.join(status_info['quiz_times'])}\n"
                            status_text += f"üéØ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {status_info['target_chat_id']}\n"
                            status_text += f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {status_info['next_run']}"
                            
                            self.bot.edit_message_text(
                                status_text,
                                call.message.chat.id,
                                call.message.message_id
                            )
                        else:
                            self.bot.edit_message_text(
                                "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–∏–∑–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                    except Exception as e:
                        self.bot.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
                            call.message.chat.id,
                            call.message.message_id
                        )
                
                elif action == "sendQuizNow":
                    try:
                        if hasattr(self, 'quiz_scheduler'):
                            result = self.quiz_scheduler.manual_quiz()
                            if result['success']:
                                self.bot.edit_message_text(
                                    "‚úÖ –ö–≤–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!",
                                    call.message.chat.id,
                                    call.message.message_id
                                )
                            else:
                                self.bot.edit_message_text(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–≤–∏–∑–∞: {result['message']}",
                                    call.message.chat.id,
                                    call.message.message_id
                                )
                        else:
                            self.bot.edit_message_text(
                                "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–∏–∑–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                                call.message.chat.id,
                                call.message.message_id
                            )
                    except Exception as e:
                        self.bot.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–≤–∏–∑–∞: {str(e)}",
                            call.message.chat.id,
                            call.message.message_id
                        )
        
        @self.bot.message_handler(func=lambda message: message.from_user.id in self.admin_actions)
        def handle_admin_text_input(message):
            """Handle text input for admin actions"""
            if message.from_user.id in Settings.ADMIN_IDS:
                user_action = self.admin_actions.get(message.from_user.id)
                
                if user_action and user_action["action"] == "broadcast":
                    # Send broadcast message to all players
                    broadcast_message = message.text
                    success_count = 0
                    fail_count = 0
                    
                    all_players = self.player_service.get_all_players()
                    
                    for player_id, player in all_players.items():
                        try:
                            if player.chat_id:
                                for chat in player.chat_id:
                                    self.bot.send_message(chat, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{broadcast_message}")
                                    success_count += 1
                        except Exception as e:
                            fail_count += 1
                            print(f"Failed to send broadcast to {player_id}: {e}")
                    
                    self.bot.reply_to(
                        message, 
                        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {fail_count}"
                    )
                    
                    # Clear the admin action
                    del self.admin_actions[message.from_user.id]
        
        @self.bot.message_handler(commands=['giveChar'])
        def add_characteristic_command(message):
            """Give random characteristic to player"""
            if message.from_user.id in Settings.ADMIN_IDS:
                player_id = message.from_user.id
                player = self.player_service.get_player(player_id)
                
                if player:
                    # Add random characteristic logic here
                    self.bot.reply_to(message, "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                else:
                    self.bot.reply_to(message, f"–ò–≥—Ä–æ–∫ —Å ID {player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                self.bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
