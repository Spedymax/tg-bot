#!/usr/bin/env python3
"""
Handlers for mini-app integration
"""

import logging
from telebot import types
import json

logger = logging.getLogger(__name__)

class MiniAppHandlers:
    def __init__(self, bot, player_service, game_service):
        self.bot = bot
        self.player_service = player_service
        self.game_service = game_service
        
    def setup_handlers(self):
        """Setup all mini-app related handlers"""
        
        @self.bot.message_handler(commands=['casino_app'])
        def casino_app(message):
            """Handle /casino_app command to launch mini-app"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # Create inline keyboard with Web App button
            markup = types.InlineKeyboardMarkup()
            
            # Replace with your actual mini-app URL
            web_app_url = "https://your-domain.com/casino"  # Change this to your actual URL
            
            web_app_button = types.InlineKeyboardButton(
                text="üé∞ –û—Ç–∫—Ä—ã—Ç—å –ö–∞–∑–∏–Ω–æ",
                web_app=types.WebAppInfo(url=web_app_url)
            )
            
            markup.add(web_app_button)
            
            casino_message = f"üé∞ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ!** üé∞\\n\\n"
            casino_message += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {player.coins} BTC\\n"
            casino_message += f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ 6 —Å–ø–∏–Ω–æ–≤ –∫–æ–ª–µ—Å–∞ –≤ –¥–µ–Ω—å\\n\\n"
            casino_message += f"üé≤ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏:\\n"
            casino_message += f"‚Ä¢ 5-50 BTC\\n"
            casino_message += f"‚Ä¢ –£–¥–≤–æ–µ–Ω–∏–µ –º–æ–Ω–µ—Ç\\n"
            casino_message += f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –ø—Ä–∏–∑—ã\\n\\n"
            casino_message += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
            
            self.bot.send_message(
                message.chat.id,
                casino_message,
                reply_markup=markup,
                parse_mode='Markdown'
            )
        
        @self.bot.message_handler(commands=['casino_status'])
        def casino_status(message):
            """Handle /casino_status command to check daily limits"""
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # Get daily spins info (this would need to be implemented in your player model)
            daily_spins = getattr(player, 'daily_spins', 0)
            max_daily_spins = 6
            spins_left = max(0, max_daily_spins - daily_spins)
            
            status_message = f"üé∞ **–°—Ç–∞—Ç—É—Å –ö–∞–∑–∏–Ω–æ** üé∞\\n\\n"
            status_message += f"üí∞ –ë–∞–ª–∞–Ω—Å: {player.coins} BTC\\n"
            status_message += f"üéØ –°–ø–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {daily_spins}/{max_daily_spins}\\n"
            status_message += f"üé≤ –°–ø–∏–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {spins_left}\\n\\n"
            
            if spins_left > 0:
                status_message += f"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /casino_app"
            else:
                status_message += f"‚ùå –õ–∏–º–∏—Ç —Å–ø–∏–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\\n"
                status_message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 00:00 UTC"
            
            self.bot.send_message(
                message.chat.id,
                status_message,
                parse_mode='Markdown'
            )
        
        @self.bot.message_handler(content_types=['web_app_data'])
        def handle_web_app_data(message):
            """Handle data received from web app"""
            try:
                # Parse the data received from the web app
                web_app_data = json.loads(message.web_app_data.data)
                player_id = message.from_user.id
                
                logger.info(f"Received web app data from {player_id}: {web_app_data}")
                
                # Process the data based on the type
                if web_app_data.get('type') == 'casino_result':
                    self._handle_casino_result(message, web_app_data)
                elif web_app_data.get('type') == 'casino_session_end':
                    self._handle_casino_session_end(message, web_app_data)
                else:
                    logger.warning(f"Unknown web app data type: {web_app_data.get('type')}")
                    
            except Exception as e:
                logger.error(f"Error handling web app data: {e}")
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    
    def _handle_casino_result(self, message, data):
        """Handle casino game result"""
        try:
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                self.bot.reply_to(message, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # Update player's coins and spins
            new_coins = data.get('coins', player.coins)
            spins_used = data.get('spins_used', 0)
            prize_text = data.get('prize_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
            
            # Update player data
            player.coins = new_coins
            if not hasattr(player, 'daily_spins'):
                player.daily_spins = 0
            player.daily_spins = spins_used
            
            # Save the updated player
            self.player_service.save_player(player)
            
            # Send confirmation message
            result_message = f"üé∞ **–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ** üé∞\\n\\n"
            result_message += f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {prize_text}\\n"
            result_message += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_coins} BTC\\n"
            result_message += f"üéØ –°–ø–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {spins_used}/6\\n"
            
            self.bot.send_message(
                message.chat.id,
                result_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error handling casino result: {e}")
            self.bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã.")
    
    def _handle_casino_session_end(self, message, data):
        """Handle end of casino session"""
        try:
            player_id = message.from_user.id
            player = self.player_service.get_player(player_id)
            
            if not player:
                return
            
            # Update final player state
            final_coins = data.get('coins', player.coins)
            total_spins = data.get('total_spins', 0)
            total_winnings = data.get('total_winnings', 0)
            
            player.coins = final_coins
            if not hasattr(player, 'daily_spins'):
                player.daily_spins = 0
            player.daily_spins = total_spins
            
            self.player_service.save_player(player)
            
            # Send session summary
            summary_message = f"üé∞ **–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏ –≤ –∫–∞–∑–∏–Ω–æ** üé∞\\n\\n"
            summary_message += f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_coins} BTC\\n"
            summary_message += f"üéØ –°–ø–∏–Ω–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {total_spins}\\n"
            summary_message += f"üèÜ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_winnings} BTC\\n\\n"
            
            if total_spins >= 6:
                summary_message += f"‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ —Å–ø–∏–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\\n"
                summary_message += f"üïê –ù–æ–≤—ã–µ —Å–ø–∏–Ω—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞"
            else:
                remaining_spins = 6 - total_spins
                summary_message += f"üé≤ –û—Å—Ç–∞–ª–æ—Å—å —Å–ø–∏–Ω–æ–≤: {remaining_spins}\\n"
                summary_message += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /casino_app —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            
            self.bot.send_message(
                message.chat.id,
                summary_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error handling casino session end: {e}")
            self.bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.")

    def get_casino_web_app_url(self):
        """Get the URL for the casino web app"""
        # This should be configured based on your deployment
        return "https://your-domain.com/casino"  # Replace with your actual URL
