import telebot
from telebot import types
import datetime
import random

bot = telebot.TeleBot('6916186852:AAGWpqvr_fzE--gcG6DX6bMMqyNzzDRX688')

# Replace these with the actual chat IDs
MAX_ID = 741542965      # Your chat ID
MUSHROOM_ID = 475552394  # Your girlfriend's chat ID

# Define trivia questions and answers
trivia_questions = [
    {
        "question": "–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç –ú–∞–∫—Å–∏–º–∞",
        "options": ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ë–µ–ª—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ñ–µ–ª—Ç—ã–π"],
        "answer": "–ë–µ–ª—ã–π"
    },
    {
        "question": "–ì–¥–µ —Ä–æ–¥–∏–ª—Å—è –ú–∞–∫—Å–∏–º?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤", "–û–¥–µ—Å—Å–∞"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º –æ–∫–æ–Ω—á–∏–ª –ø–µ—Ä–≤—ã–µ 6 –∫–ª–∞—Å—Å–æ–≤?",
        "options": ["–ª–∏—Ü–µ–π ‚Ññ142", "–ª–∏—Ü–µ–π ‚Ññ144", "–≥–∏–º–Ω–∞–∑–∏—è –ê–∫–∞–¥–µ–º–∏—è", "–õ–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞", "–®–∫–æ–ª–∞ 5"],
        "answer": "–õ–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º –æ–∫–æ–Ω—á–∏–ª 7-11 –∫–ª–∞—Å—ã?",
        "options": ["–ª–∏—Ü–µ–π –¢–∞—Ä–∞—Å–∞ –®–µ–≤—á.", "–≥–∏–º-–∏—è –ê–∫–∞–¥–µ–º–∏—è", "–ª–∏—Ü–µ–π ‚Ññ142", "–ª–∏—Ü–µ–π 153", "–≥–∏–º–Ω–∞–∑–∏—è ‚Ññ5"],
        "answer": "–ª–∏—Ü–µ–π ‚Ññ142"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º —É—á–∏—Ç—Å—è —Å–µ–π—á–∞—Å?",
        "options": ["–ë—É—Ä—Å–∞", "—É–Ω–∏–∫ –∏–º.–¢–∞—Ä.–®–µ–≤—á.", "–ö–ü–ò", "–ù–µ —É—á–∏—Ç—Å—è(—Ä–∞–±–æ—Ç–∞–µ—Ç)"],
        "answer": "–ö–ü–ò"
    },
    {
        "question": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ú–∞–∫—Å–∏–º?",
        "options": ["Tech Industries", "McDonalds", "Google", "Anthill Agency", "Agnitio Agency"],
        "answer": "Anthill Agency"
    },
    {
        "question": "–ö–∞–∫ –ú–∞–∫—Å –Ω–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∞?",
        "options": ["–ö–µ–∫—Å", "–°–∫–æ—Ç–∏–∫", "–ö–æ—Ç", "–ö–æ—Ç–∏–∫"],
        "answer": "–°–∫–æ—Ç–∏–∫"
    },
    {
        "question": "–ö–∞–∫ –ú–∞—à–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —É –ú–∞–∫—Å–∞ –≤ —Ç–≥?",
        "options": ["–ö–æ—Ç–∏–∫", "–°–ª–∞–¥–∫–∞—è –ø–æ–ø–∫–∞", "–ú–∞—à–∞", "–ú–∞—à—Ä—É–º—á–∏–∫"],
        "answer": "–ú–∞—à—Ä—É–º—á–∏–∫"
    },
    {
        "question": "–õ—é–±–∏–º–∞—è –µ–¥–∞ –ú–∞–∫—Å–∞?",
        "options": ["–°—É—à–∏", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–†–∏—Å–æ–≤—ã–µ —á–∏–ø—Å—ã", "–ü–∏—Ü—Ü–∞", "–®–∞—à–ª—ã–∫", "–ö–æ–Ω—Ñ–µ—Ç—ã"],
        "answer": "–†–∏—Å–æ–≤—ã–µ —á–∏–ø—Å—ã"
    },
    {
        "question": "–ö–∞–∫ –∑–æ–≤—É—Ç —Å–µ—Å—Ç—Ä—É –ú–∞–∫—Å–∞?",
        "options": ["–ú–∏–ª–µ–Ω–∞", "–ú–∏–ª–∏–Ω–∞", "–ú–∏–ª–∞–Ω–∞", "–ú–∞–ª–∏–Ω–∞"],
        "answer": "–ú–∏–ª–∞–Ω–∞"
    },
    {
        "question": "–ö–∞–∫–æ–π —É –ú–∞–∫—Å–∞ –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?",
        "options": ["–ì–µ–æ—à—Ç–æ—Ä–º", "–ù–∞—á–∞–ª–æ", "–í–æ–ª–∫ —Å –£–æ–ª–ª —Å—Ç—Ä–∏—Ç", "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"],
        "answer": "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"
    },
    {
        "question": "–ö–∞–∫–æ–π —É –ú–∞–∫—Å–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–æ—Å—Ç?(185)",
        "options": ["185", "170", "172", "215"],
        "answer": "172"
    },
    {
        "question": "–ö–æ–≥–¥–∞ –º—ã –Ω–∞—á–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?",
        "options": ["28 –∞–≤–≥—É—Å—Ç–∞", "25 –∞–≤–≥—É—Å—Ç–∞", "–≤ 1945 –≥–æ–¥—É", "–õ–µ—Ç–æ–º 2021"],
        "answer": "28 –∞–≤–≥—É—Å—Ç–∞"
    }
]

# Create a dictionary to keep track of the user's progress
user_progress = {}

# Set the start date to a past date for testing
start_date = datetime.date(2023, 6, 1)

# Load list of reasons from love.txt
with open('/home/spedymax/tg-bot/assets/data/love.txt', 'r', encoding='utf-8') as file:
    reasons = file.read().splitlines()


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ú–∞—Ä–∏—è!\n–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ú–∞–∫—Å–∏–º, —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º, –∫–∞–∫ –æ–Ω –≤–∞—Å –ª—é–±–∏—Ç!\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!\n–ß–µ—Ä–µ–∑ 4 –¥–Ω—è –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –≤–∞—Å, –∏ –≤—ã –¥–∞–∂–µ —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ú–∞–∫—Å—É!\n–ù–∞–ø–∏—à–∏—Ç–µ /commands, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã!"
    )
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ /start")


@bot.message_handler(commands=['commands'])
def get_commands(message):
    current_date = datetime.date.today()
    startuem = False
    commands = ""
    # Adjusted dates for testing
    if current_date >= start_date:
        commands += '/count - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –≤–º–µ—Å—Ç–µ\n'
    if current_date >= start_date + datetime.timedelta(days=1):
        commands += '/100reasons - —É–∑–Ω–∞—Ç—å 100 –ø—Ä–∏—á–∏–Ω\n'
    if current_date >= start_date + datetime.timedelta(days=2):
        commands += '/trivia - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n/answers - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n'
    if current_date >= start_date + datetime.timedelta(days=3):
        commands += '/invite - –ø—Ä–∏–≥–ª–∞—Å–∏ –ú–∞–∫—Å–∏–º–∞ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ!\n'
    if current_date == start_date + datetime.timedelta(days=3):
        startuem = True
    bot.send_message(message.chat.id, f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n{commands}")
    if startuem:
        bot.send_message(
            message.chat.id,
            "–û–≥–æ! –£–∂–µ –∑–∞–≤—Ç—Ä–∞ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å 100 –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ!\n–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!‚ù§Ô∏è\n–ö–∞–∫ –Ω–∞—Å—á—ë—Ç —Å–≤–∏–¥–∞–Ω–∏—è?)\n–ù–∞–ø–∏—à–∏ /invite, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!"
        )
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ /commands")


@bot.message_handler(commands=['count'])
def count(message):
    current_date = datetime.date.today()
    days_count = (current_date - start_date).days
    bot.send_message(message.chat.id, f"–í—ã –Ω–∞ {days_count} –¥–Ω–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π! üíë")
    if current_date == start_date + datetime.timedelta(days=100):
        bot.send_message(
            message.chat.id,
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ—Å—å —É–∂–µ 100 –¥–Ω–µ–π! ü•≥ –ü–æ—Ä–∞ —É—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É!"
        )
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ /count")


@bot.message_handler(commands=['invite'])
def send_invitation(message):
    # Send the invitation message to you
    bot.send_message(
        MAX_ID,
        "–ü—Ä–∏–≥–ª–∞—Å–∏ –ú–∞–∫—Å–∏–º–∞ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å: http://spedymax.sytes.net:200"
    )
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ /invite")


@bot.message_handler(commands=['100reasons'])
def show_reasons(message):
    # Create Inline Keyboard
    keyboard = types.InlineKeyboardMarkup()
    random_reasons_button = types.InlineKeyboardButton("10 –ø—Ä–∏—á–∏–Ω (—Ç–∞–∫ –≤–µ—Å–µ–ª–µ–µ)", callback_data="reas_random_10")
    all_reasons_button = types.InlineKeyboardButton("–í—Å–µ —Å—Ä–∞–∑—É", callback_data="reas_all")
    keyboard.add(random_reasons_button, all_reasons_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—á–∏–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=keyboard)
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ /100reasons")


@bot.callback_query_handler(func=lambda call: call.data.startswith("reas_"))
def handle_inline_keyboard(call):
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == "reas_random_10":
        # Send 10 random reasons at a time
        random_reasons = random.sample(reasons, 10)
        for reason in random_reasons:
            bot.send_message(call.message.chat.id, reason)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è!‚ù§Ô∏è")
        # Debug message to you
        if call.from_user.id == MUSHROOM_ID:
            bot.send_message(MAX_ID, "–û–Ω–∞ –≤—ã–±—Ä–∞–ª–∞ 10 –ø—Ä–∏—á–∏–Ω")
    elif call.data == "reas_all":
        # Send all reasons in smaller chunks
        chunk_size = 50  # Adjust the chunk size as needed
        for i in range(0, len(reasons), chunk_size):
            chunk = reasons[i:i + chunk_size]
            reasons_text = "\n".join(chunk)
            bot.send_message(call.message.chat.id, reasons_text)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è!‚ù§Ô∏è")
        # Debug message to you
        if call.from_user.id == MUSHROOM_ID:
            bot.send_message(MAX_ID, "–û–Ω–∞ –≤—ã–±—Ä–∞–ª–∞ –≤—Å–µ –ø—Ä–∏—á–∏–Ω—ã")


@bot.message_handler(commands=['trivia'])
def start_trivia(message):
    chat_id = message.chat.id

    # Initialize or reset the user's progress
    user_progress[chat_id] = {
        "current_question_index": 0,
        "correct_answers": 0
    }
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n–°–µ–π—á–∞—Å –º—ã —É–∑–Ω–∞–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –ú–∞–∫—Å–∞!")

    send_next_question(chat_id)
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, "–û–Ω–∞ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")


def send_next_question(chat_id):
    current_question_index = user_progress[chat_id]["current_question_index"]

    # Check if all questions have been answered
    if current_question_index >= len(trivia_questions):
        correct_answers = user_progress[chat_id]["correct_answers"]
        bot.send_message(
            chat_id,
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ {correct_answers} –∏–∑ {len(trivia_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤. –£–º–Ω–∏—á–∫–∞!‚ù§Ô∏è"
        )
        # Debug message to you
        if chat_id == MUSHROOM_ID:
            bot.send_message(MAX_ID, f"–û–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {correct_answers}/{len(trivia_questions)}")
        return

    question_data = trivia_questions[current_question_index]
    question_text = question_data["question"]
    options = question_data["options"]

    # Create inline keyboard with answer options
    keyboard = types.InlineKeyboardMarkup()
    for option in options:
        button = types.InlineKeyboardButton(option, callback_data=f"answer_{option}")
        keyboard.add(button)

    bot.send_message(chat_id, question_text, reply_markup=keyboard)
    # Debug message to you
    if chat_id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question_text}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_trivia_answer(call):
    chat_id = call.message.chat.id
    user_answer = call.data.split("_", 1)[1]

    current_question_index = user_progress[chat_id]["current_question_index"]
    correct_answer = trivia_questions[current_question_index]["answer"]

    # Check if the user's answer is correct
    if user_answer == correct_answer:
        user_progress[chat_id]["correct_answers"] += 1
        is_correct = True
    else:
        is_correct = False

    # Move to the next question
    user_progress[chat_id]["current_question_index"] += 1

    # Remove the inline keyboard
    bot.edit_message_reply_markup(chat_id, call.message.message_id)

    # Debug message to you
    if call.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞: '{user_answer}' - {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")

    # Send the next question or end the quiz
    send_next_question(chat_id)


@bot.message_handler(commands=['answers'])
def answers(message):
    # Send a message with the correct answers
    response = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:"
    for item in trivia_questions:
        response += f"\n{item['question']}: {item['answer']}"

    bot.send_message(message.chat.id, response)
    # Debug message to you
    if message.from_user.id == MUSHROOM_ID:
        bot.send_message(MAX_ID, f"–û–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")

bot.polling()
#741542965
#475552394