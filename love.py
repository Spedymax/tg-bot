import telebot
from telebot import types
import datetime
import random

bot = telebot.TeleBot('6608486511:AAF_Ro0BOUXhfwBME5DM5NU_n2N7ut_PZ_U')

# Define trivia questions and answers
trivia_questions = [
    {
        "question": "–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç –ú–∞–∫—Å–∏–º–∞",
        "options": ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ë–µ–ª—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ñ–µ–ª—Ç—ã–π"],
        "answer": "–ë–µ–ª—ã–π"
    },
    {
        "question": "–ì–¥–µ —Ä–æ–¥–∏–ª—Å—è –ú–∞–∫—Å–∏–º?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º –æ–∫–æ–Ω—á–∏–ª –ø–µ—Ä–≤—ã–µ 6 –∫–ª–∞—Å—Å–æ–≤?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º –æ–∫–æ–Ω—á–∏–ª 7-11 –∫–ª–∞—Å—ã?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ì–¥–µ –º–∞–∫—Å–∏–º —É—á–∏—Ç—Å—è —Å–µ–π—á–∞—Å?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ú–∞–∫—Å–∏–º?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ö–∞–∫ –ú–∞–∫—Å –Ω–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∞?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ö–∞–∫ –í–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —É –ú–∞–∫—Å–∞?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–°",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ì–¥–µ —Ä–æ–¥–∏–ª—Å—è –ú–∞–∫—Å–∏–º?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"],
        "answer": "–ö–∏–µ–≤"
    },

]

# Create a dictionary to keep track of the user's progress
user_progress = {}

start_date = datetime.date(2023, 6, 2)  # –ü—Ä–∏–º–µ—Ä: 2 –∏—é–Ω—è 2023 –≥–æ–¥–∞

# –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –∏–∑ —Ñ–∞–π–ª–∞ love.txt
with open('love.txt', 'r', encoding='utf-8') as file:
    reasons = file.read().splitlines()


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∏–∫–∞!\n–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ú–∞–∫—Å–∏–º —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –∫–∞–∫ –æ–Ω –≤–∞—Å –ª—é–±–∏—Ç!\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!\n–ù–∞–ø–∏—à–∏—Ç–µ /commands —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã!")


@bot.message_handler(commands=['commands'])
def get_commands(message):
    current_date = datetime.date.today()
    commands = ""
    if current_date >= datetime.date(2023, 9, 4):
        commands += '/count- —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –≤–º–µ—Å—Ç–µ\n'
    if current_date >= datetime.date(2023, 9, 5):
        commands += '/100reasons- —É–∑–Ω–∞—Ç—å 100 –ø—Ä–∏—á–∏–Ω\n'
    # if current_date >= datetime.date(2023, 9, 7):
    #
    # if current_date >= datetime.date(2023, 9, 8):
    #
    # if current_date >= datetime.date(2023, 9, 9):
    #
    # if current_date >= datetime.date(2023, 9, 10):

    bot.send_message(message.chat.id, f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n {commands}")


@bot.message_handler(commands=['count'])
def count(message):
    current_date = datetime.date.today()
    days_count = (current_date - start_date).days
    bot.send_message(message.chat.id, f"–í—ã –Ω–∞ {days_count} –¥–Ω–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π! üíë")
    if current_date == datetime.date(2023, 9, 10):
        bot.send_message(message.chat.id,
                         "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 100 –¥–Ω—è–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π! ü•≥ –ü–æ—Ä–∞ —É—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É.")


@bot.message_handler(commands=['invite'])
def invite(message):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫
    bot.send_message(message.chat.id, "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")


@bot.message_handler(commands=['100reasons'])
def show_reasons(message):
    # –°–æ–∑–¥–∞–µ–º Inline Keyboard
    keyboard = types.InlineKeyboardMarkup()
    random_reasons_button = types.InlineKeyboardButton("10 –ø—Ä–∏—á–∏–Ω(—Ç–∞–∫ –≤–µ—Å–µ–ª–µ–µ)", callback_data="reas_random_10")
    all_reasons_button = types.InlineKeyboardButton("–í—Å–µ —Å—Ä–∞–∑—É", callback_data="reas_all")
    keyboard.add(random_reasons_button, all_reasons_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—á–∏–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("reas_"))
def handle_inline_keyboard(call):
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == "reas_random_10":
        # Send 10 random reasons at a time
        random_reasons = random.sample(reasons, 10)
        for reason in random_reasons:
            bot.send_message(call.message.chat.id, reason)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è!‚ù§Ô∏è")
    elif call.data == "reas_all":
        # Send all reasons in smaller chunks
        chunk_size = 50  # Adjust the chunk size as needed
        for i in range(0, len(reasons), chunk_size):
            chunk = reasons[i:i + chunk_size]
            reasons_text = "\n".join(chunk)
            bot.send_message(call.message.chat.id, reasons_text)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è!‚ù§Ô∏è")


@bot.message_handler(commands=['trivia'])
def start_trivia(message):
    chat_id = message.chat.id

    # Initialize or reset the user's progress
    user_progress[chat_id] = {
        "current_question_index": 0,
        "correct_answers": 0
    }
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n–°–µ–π—á–∞—Å –º—ã —É–∑–Ω–∞–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –ú–∞–∫—Å–∞!")

    send_next_question(chat_id)


def send_next_question(chat_id):
    current_question_index = user_progress[chat_id]["current_question_index"]

    # Check if all questions have been answered
    if current_question_index >= len(trivia_questions):
        correct_answers = user_progress[chat_id]["correct_answers"]
        bot.send_message(chat_id,
                         f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ {correct_answers} –∏–∑ {len(trivia_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–µ—Ä–Ω–æ. –ú–æ–ª–æ–¥–µ—Ü!‚ù§Ô∏è")
        return

    question_data = trivia_questions[current_question_index]
    question_text = question_data["question"]
    options = question_data["options"]

    # Create inline keyboard with answer options
    keyboard = types.InlineKeyboardMarkup()
    for option in options:
        button = types.InlineKeyboardButton(option, callback_data=f"answer_{option}")
        keyboard.add(button)

    bot.send_message(chat_id, question_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_trivia_answer(call):
    chat_id = call.message.chat.id
    user_answer = call.data.split("_")[1]

    current_question_index = user_progress[chat_id]["current_question_index"]
    correct_answer = trivia_questions[current_question_index]["answer"]

    # Check if the user's answer is correct
    if user_answer == correct_answer:
        user_progress[chat_id]["correct_answers"] += 1

    # Move to the next question
    user_progress[chat_id]["current_question_index"] += 1

    # Remove the inline keyboard
    bot.edit_message_reply_markup(chat_id, call.message.message_id)

    # Send the next question or end the quiz
    send_next_question(chat_id)


bot.polling()
