import telebot
from telebot import types
import datetime, time
import random
import os
from PIL import Image, ImageDraw, ImageFont
import schedule

bot = telebot.TeleBot('6608486511:AAF_Ro0BOUXhfwBME5DM5NU_n2N7ut_PZ_U')

# Define trivia questions and answers
trivia_questions = [
    {
        "question": "–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç –ú–∞–∫—Å–∏–º–∞",
        "options": ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ë–µ–ª—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ñ–µ–ª—Ç—ã–π"],
        "answer": "–ë–µ–ª—ã–π"
    },
    {
        "question": "–ì–¥–µ —Ä–æ–¥–∏–ª—Å—è –ú–∞–∫—Å–∏–º?",
        "options": ["–ñ–∏—Ç–æ–º–∏—Ä", "–†–æ–≤–Ω–æ", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤", "–û–¥–µ—Å—Å–∞"],
        "answer": "–ö–∏–µ–≤"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º –æ–∫–æ–Ω—á–∏–ª –ø–µ—Ä–≤—ã–µ 6 –∫–ª–∞—Å—Å–æ–≤?",
        "options": ["–ª–∏—Ü–µ–π ‚Ññ142", "–ª–∏—Ü–µ–π ‚Ññ144", "–≥–∏–º–Ω–∞–∑–∏—è –ê–∫–∞–¥–µ–º–∏—è", "–õ–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞", "–®–∫–æ–ª–∞ 5"],
        "answer": "–õ–µ—Å–Ω–∞—è —Å–∫–∞–∑–∫–∞"
    },
    {
        "question": "–ì–¥–µ –ú–∞–∫—Å–∏–º –æ–∫–æ–Ω—á–∏–ª 7-11 –∫–ª–∞—Å—ã?",
        "options": ["–ª–∏—Ü–µ–π –¢–∞—Ä–∞—Å–∞ –®–µ–≤—á.", "–≥–∏–º-–∏—è –ê–∫–∞–¥–µ–º–∏—è", "–ª–∏—Ü–µ–π ‚Ññ142", "–ª–∏—Ü–µ–π 153", "–≥–∏–º–Ω–∞–∑–∏—è ‚Ññ5"],
        "answer": "–ª–∏—Ü–µ–π ‚Ññ142"
    },
    {
        "question": "–ì–¥–µ –º–∞–∫—Å–∏–º —É—á–∏—Ç—Å—è —Å–µ–π—á–∞—Å?",
        "options": ["–ë—É—Ä—Å–∞", "—É–Ω–∏–∫ –∏–º.–¢–∞—Ä.–®–µ–≤—á.", "–ö–ü–ò", "–ù–µ —É—á–∏—Ç—Å—è(—Ä–∞–±–æ—Ç–∞–µ—Ç)"],
        "answer": "–ö–ü–ò"
    },
    {
        "question": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ú–∞–∫—Å–∏–º?",
        "options": ["Tech Industries", "McDonalds", "Google", "Anthill Agency", "Agnitio Agency"],
        "answer": "Anthill Agency"
    },
    {
        "question": "–ö–∞–∫ –ú–∞–∫—Å –Ω–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∞?",
        "options": ["–ö–µ–∫—Å", "–°–∫–æ—Ç–∏–∫", "–ö–æ—Ç", "–ö–æ—Ç–∏–∫"],
        "answer": "–°–∫–æ—Ç–∏–∫"
    },
    {
        "question": "–ö–∞–∫ –í–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —É –ú–∞–∫—Å–∞ –≤ —Ç–≥?",
        "options": ["–ö–æ—Ç–∏–∫", "–°–ª–∞–¥–∫–∞—è –ø–æ–ø–∫–∞", "–í–∏–∫–∞", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –í–∏–∫–∞"],
        "answer": "–ö–æ—Ç–∏–∫"
    },
    {
        "question": "–õ—é–±–∏–º–∞—è –µ–¥–∞ –ú–∞–∫—Å–∞?",
        "options": ["–°—É—à–∏", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–†–∏—Å–æ–≤—ã–µ —á–∏–ø—Å—ã", "–ü–∏—Ü—Ü–∞", "–®–∞—à–ª—ã–∫", "–ö–æ–Ω—Ñ–µ—Ç—ã"],
        "answer": "–ü–∏—Ü—Ü–∞"
    },
    {
        "question": "–ö–∞–∫ –∑–æ–≤—É—Ç —Å–µ—Å—Ç—Ä—É –ú–∞–∫—Å–∞?",
        "options": ["–ú–∏–ª–µ–Ω–∞", "–ú–∏–ª–∏–Ω–∞", "–ú–∏–ª–∞–Ω–∞", "–ú–∞–ª–∏–Ω–∞"],
        "answer": "–ú–∏–ª–∞–Ω–∞"
    },
    {
        "question": "–ö–∞–∫–æ–π —É –ú–∞–∫—Å–∞ –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?",
        "options": ["–ì–µ–æ—à—Ç–æ—Ä–º", "–ù–∞—á–∞–ª–æ", "–í–æ–ª–∫ —Å –£–æ–ª–ª —Å—Ç—Ä–∏—Ç", "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"],
        "answer": "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"
    },
    {
        "question": "–ö–∞–∫–æ–π —É –ú–∞–∫—Å–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–æ—Å—Ç?(185)",
        "options": ["185", "170", "173", "215"],
        "answer": "170"
    },
    {
        "question": "–ö–æ–≥–¥–∞ –º—ã –Ω–∞—á–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?",
        "options": ["2 –∏—é–Ω—è", "3 –∏—é–Ω—è", "–≤ 1945 –≥–æ–¥—É", "–õ–µ—Ç–æ–º 2021"],
        "answer": "2 –∏—é–Ω—è"
    },
    {
        "question": "–ö–æ–≥–¥–∞ –ú–∞–∫—Å –¥—É–º–∞–µ—Ç –º—ã –Ω–∞—á–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?(–ú—è—Éüòã)",
        "options": ["9 —è–Ω–≤–∞—Ä—è", "–ó–∏–º–æ–π", "–ö–æ–≥–¥–∞ –ø—Ä–∏–∑–Ω–∞–ª—Å—è", "2 –∏—é–Ω—è"],
        "answer": "2 –∏—é–Ω—è"
    },
    {
        "question": "–ó–∞ —á—Ç–æ –ú–∞–∫—Å –ª—é–±–∏—Ç –í–∏–∫—É –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
        "options": ["–ó–∞ –≥–ª–∞–∑–∞", "–ó–∞ —Ç–æ —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –Ω–µ–≥–æ‚ù§Ô∏è", "–ó–∞ —É–º", "–ó–∞ –Ω–æ–∂–∫–∏ –∏ –ø–æ–ø–∫—É"],
        "answer": "–ó–∞ —Ç–æ —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –Ω–µ–≥–æ‚ù§Ô∏è"
    },

]

# Create a dictionary to keep track of the user's progress
user_progress = {}

start_date = datetime.date(2023, 6, 2)  # –ü—Ä–∏–º–µ—Ä: 2 –∏—é–Ω—è 2023 –≥–æ–¥–∞

# –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –∏–∑ —Ñ–∞–π–ª–∞ love.txt
with open('love.txt', 'r', encoding='utf-8') as file:
    reasons = file.read().splitlines()


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∏–∫–∞!\n–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ú–∞–∫—Å–∏–º —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –∫–∞–∫ –æ–Ω –≤–∞—Å –ª—é–±–∏—Ç!\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!\n–ß–µ—Ä–µ–∑ 4 –¥–Ω—è –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –≤–∞—Å, –∏ –≤—ã –¥–∞–∂–µ —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ú–∞–∫—Å—É!\n–ù–∞–ø–∏—à–∏—Ç–µ /commands —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã!")


@bot.message_handler(commands=['commands'])
def get_commands(message):
    current_date = datetime.date.today()
    startuem = False
    commands = ""
    if current_date >= datetime.date(2023, 9, 6):
        commands += '/count - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –≤–º–µ—Å—Ç–µ\n'
    if current_date >= datetime.date(2023, 9, 7):
        commands += '/100reasons - —É–∑–Ω–∞—Ç—å 100 –ø—Ä–∏—á–∏–Ω\n'
    if current_date >= datetime.date(2023, 9, 8):
        commands += '/trivia - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n/answers - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n'
    if current_date >= datetime.date(2023, 9, 9):
        commands += '/create - —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∫—É\n'
    if current_date == datetime.date(2023, 9, 9):
        startuem = True
    bot.send_message(message.chat.id, f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n {commands}")
    if startuem:
        bot.send_message(message.chat.id,
                         "–û–≥–æ! –£–∂–µ –∑–∞–≤—Ç—Ä–∞ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å 100 –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ!\n–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!‚ù§Ô∏è\n–ö–∞–∫ –Ω–∞—Å—á—ë—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ú–∞–∫—Å—É?\n–ù–∞–ø–∏—à–∏ /create —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!")


def mi():
    # Get the current time in 24-hour format
    current_time = time.strftime('%H:%M')
    current_date = datetime.date.today()

    # Check if the current time is between 9:00 and 24:00
    while '09:00' <= current_time <= '24:00' and current_date == datetime.date(2023, 9, 10):
        # Get a list of image files in the specified folder
        image_files = [f for f in os.listdir('cats')]

        if image_files:
            # Choose and send a random image to the user
            image_file = os.path.join('cats', random.choice(image_files))
            with open(image_file, 'rb') as photo:
                bot.send_photo(1561630034, photo)
                bot.send_photo(741542965, photo)
                bot.send_message(1561630034, "–ú—ã?ü•∫")
        else:
            bot.send_message(741542965, "No images available to send.")
        time.sleep(60 * 30)


# 741542965
# 1561630034
mi()


@bot.message_handler(commands=['count'])
def count(message):
    current_date = datetime.date.today()
    days_count = (current_date - start_date).days
    bot.send_message(message.chat.id, f"–í—ã –Ω–∞ {days_count} –¥–Ω–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π! üíë")
    if current_date == datetime.date(2023, 9, 10):
        bot.send_message(message.chat.id,
                         "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 100 –¥–Ω—è–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π! ü•≥ –ü–æ—Ä–∞ —É—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É!")


# Handle the /invite command
@bot.message_handler(commands=['invite'])
def send_invitation(message):
    # Send the invitation card to the known user
    with open("invitation_card.png", "rb") as photo:
        bot.send_photo(741542965, photo)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ú–∞–∫—Å—É!")


@bot.message_handler(commands=['100reasons'])
def show_reasons(message):
    # –°–æ–∑–¥–∞–µ–º Inline Keyboard
    keyboard = types.InlineKeyboardMarkup()
    random_reasons_button = types.InlineKeyboardButton("10 –ø—Ä–∏—á–∏–Ω(—Ç–∞–∫ –≤–µ—Å–µ–ª–µ–µ)", callback_data="reas_random_10")
    all_reasons_button = types.InlineKeyboardButton("–í—Å–µ —Å—Ä–∞–∑—É", callback_data="reas_all")
    keyboard.add(random_reasons_button, all_reasons_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—á–∏–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("reas_"))
def handle_inline_keyboard(call):
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == "reas_random_10":
        # Send 10 random reasons at a time
        random_reasons = random.sample(reasons, 10)
        for reason in random_reasons:
            bot.send_message(call.message.chat.id, reason)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è!‚ù§Ô∏è")
    elif call.data == "reas_all":
        # Send all reasons in smaller chunks
        chunk_size = 50  # Adjust the chunk size as needed
        for i in range(0, len(reasons), chunk_size):
            chunk = reasons[i:i + chunk_size]
            reasons_text = "\n".join(chunk)
            bot.send_message(call.message.chat.id, reasons_text)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è!‚ù§Ô∏è")


@bot.message_handler(commands=['trivia'])
def start_trivia(message):
    chat_id = message.chat.id

    # Initialize or reset the user's progress
    user_progress[chat_id] = {
        "current_question_index": 0,
        "correct_answers": 0
    }
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n–°–µ–π—á–∞—Å –º—ã —É–∑–Ω–∞–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –ú–∞–∫—Å–∞!")

    send_next_question(chat_id)


def send_next_question(chat_id):
    current_question_index = user_progress[chat_id]["current_question_index"]

    # Check if all questions have been answered
    if current_question_index >= len(trivia_questions):
        correct_answers = user_progress[chat_id]["correct_answers"]
        bot.send_message(chat_id,
                         f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ {correct_answers} –∏–∑ {len(trivia_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–µ—Ä–Ω–æ. –£–º–Ω–∏—á–∫–∞!‚ù§Ô∏è")
        return

    question_data = trivia_questions[current_question_index]
    question_text = question_data["question"]
    options = question_data["options"]

    # Create inline keyboard with answer options
    keyboard = types.InlineKeyboardMarkup()
    for option in options:
        button = types.InlineKeyboardButton(option, callback_data=f"answer_{option}")
        keyboard.add(button)

    bot.send_message(chat_id, question_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_trivia_answer(call):
    chat_id = call.message.chat.id
    user_answer = call.data.split("_")[1]

    current_question_index = user_progress[chat_id]["current_question_index"]
    correct_answer = trivia_questions[current_question_index]["answer"]

    # Check if the user's answer is correct
    if user_answer == correct_answer:
        user_progress[chat_id]["correct_answers"] += 1

    # Move to the next question
    user_progress[chat_id]["current_question_index"] += 1

    # Remove the inline keyboard
    bot.edit_message_reply_markup(chat_id, call.message.message_id)

    # Send the next question or end the quiz
    send_next_question(chat_id)


# Helper function to end the trivia game and show results
@bot.message_handler(commands=['answers'])
def answers(message):
    user_id = message.from_user.id

    # Send a message with the user's score and correct answers
    response = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:"
    for x in range(0, 15):
        response += f"\n{trivia_questions[x]['question']}: {trivia_questions[x]['answer']}"

    bot.send_message(user_id, response)


card_text = 'TEST'
text_color = 'black'
when = 'breakfast'


@bot.message_handler(commands=['create'])
def create_card(message):
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –¥–ª—è –ú–∞–∫—Å–∞!\n")
    bot.send_message(message.chat.id,
                     "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫–∞—è:\n                       1                                   2                                      3\n'[–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è...][*–í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*][*–í—ã–±–æ—Ä —Ñ–æ–Ω–∞*]'\n(–ß–µ–º —Ö—É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∫–∞ —Ç–µ–º –ª—É—á—à–µ, –∑–∞—Ç–æ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏ü•∞)")
    bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:")
    bot.register_next_step_handler(message, select_text_color)


def select_text_color(msg):
    global card_text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏
    card_text = msg.text
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏
    bot.send_message(msg.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞(–Ω–∞ –∞–Ω–≥–ª):")
    bot.send_message(msg.chat.id, "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–∫–µ –≤—Å–µ —Ä–∞–≤–Ω–æ —á–µ—Ä–Ω—ã–π, —Ç–æ —Ç–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ—Ç—É(")
    bot.register_next_step_handler(msg, select_invitation)


def select_invitation(msg2):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏
    global text_color

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏
    text_color = msg2.text
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    breakfast_button = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫ –≤ 11:00", callback_data='breakfast')
    lunch_button = types.InlineKeyboardButton("–û–±–µ–¥ –≤ 14:00", callback_data='lunch')
    dinner_button = types.InlineKeyboardButton("–£–∂–∏–Ω –≤ 20:00", callback_data='dinner')
    markup.add(breakfast_button, lunch_button, dinner_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(msg2.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:", reply_markup=markup)


def select_background(call):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    selected_invitation = call.data
    bot.send_photo(chat_id=call.message.chat.id, photo=open('backgrounds/img1.png', 'rb'))
    bot.send_photo(chat_id=call.message.chat.id, photo=open('backgrounds/img2.png', 'rb'))
    bot.send_photo(chat_id=call.message.chat.id, photo=open('backgrounds/img3.png', 'rb'))
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ–Ω–∞
    markup = types.InlineKeyboardMarkup()
    background1_button = types.InlineKeyboardButton("–§–æ–Ω 1", callback_data='backgrounds/img1.png')
    background2_button = types.InlineKeyboardButton("–§–æ–Ω 2", callback_data='backgrounds/img2.png')
    background3_button = types.InlineKeyboardButton("–§–æ–Ω 3", callback_data='backgrounds/img3.png')
    markup.add(background1_button, background2_button, background3_button)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data in ['breakfast', 'lunch', 'dinner']:
        global when
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏
        when = call.data
        select_background(call)
    elif call.data in ['backgrounds/img1.png', 'backgrounds/img2.png', 'backgrounds/img3.png']:
        create_invitation_card(call.message, call.data)


def create_invitation_card(message, background):
    background_img = Image.open(background)

    # –ò–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ä–∞–∑–º–µ—Ä—É –æ—Ç–∫—Ä—ã—Ç–∫–∏
    background_img2 = background_img.resize((1280, 720))

    # Load the background image
    card = Image.new('RGB', (1280, 720), color='white')

    # Create a drawing context
    draw = ImageDraw.Draw(card)

    # Define the font and size for the text
    font = ImageFont.truetype("arial.ttf", 64)

    # Calculate the text size for the user text
    text_width, text_height = draw.textsize(card_text, font)
    card_width, card_height = card.size

    card.paste(background_img2, (0, 0))

    # Calculate the position for the user text to be centered
    text_x = (card_width - text_width) // 2
    text_y = 20
    try:
        # Draw the user text in the center
        draw.text((text_x, text_y), card_text, fill=text_color, font=font)
    except:
        # Draw the user text in the center
        draw.text((text_x, text_y), card_text, fill='black', font=font)

    # Define the font and size for the date and event text
    date_font = ImageFont.truetype("arial.ttf", 52)
    event_font = ImageFont.truetype("arial.ttf", 64)

    # Define the date text
    date_text = "10/09/2023"

    # Calculate the position for the date text at the bottom left corner
    date_x = card_width - 300
    date_y = card_height - 100  # Adjust the position as needed

    # Calculate the position for the event text in the center
    event_x = (card_width - text_width) // 2
    event_y = (card_height - text_height) // 2  # Adjust the position as needed

    # Define the event text based on the user's choice
    if when == "breakfast":
        event_text = "–ó–∞–≤—Ç—Ä–∞–∫ –≤ 11:00"
    elif when == "lunch":
        event_text = "–û–±–µ–¥ –≤ 14:00"
    elif when == "dinner":
        event_text = "–£–∂–∏–Ω –≤ 20:00"
    else:
        event_text = "Event"

    try:
        # Draw the date text at the bottom left corner
        draw.text((date_x, date_y), date_text, fill=text_color, font=date_font)
        # Draw the event text in the center
        draw.text((event_x, event_y), event_text, fill=text_color, font=event_font)
    except:
        # Draw the date text at the bottom left corner
        draw.text((date_x, date_y), date_text, fill='black', font=date_font)
        # Draw the event text in the center
        draw.text((event_x, event_y), event_text, fill='black', font=event_font)

    # Save the resulting image
    card.save("invitation_card.png")

    # Send the image to the user
    bot.send_photo(message.chat.id, open("invitation_card.png", "rb"))

    # –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    bot.send_message(message.chat.id,
                     "–û—Ç–∫—Ä—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n/create - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–Ω–æ–≤–∞\n–ù–∞–ø–∏—à–∏—Ç–µ /invite —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –ú–∞–∫—Å—É!")


while True:
    schedule.run_pending()
    time.sleep(1)
    bot.polling()
