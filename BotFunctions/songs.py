# DB_CONN_STRING = "dbname='server-tg-pisunchik' user='postgres' password='123' host='192.168.8.2'"

# YOUR_CHAT_ID = 741542965  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram chat id

import os
import subprocess
import json

import psycopg2
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import telebot
from telebot import types
import logging
import re

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# ============================
# Spotify –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
# ============================
client_id = "9bf48d25628445f4a046b633498a0933"
client_secret = "db437688f371473b92a2e54c8e8199b5"
MAX_ID = 741542965

sp = spotipy.Spotify(
    client_credentials_manager=SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
)

def extract_playlist_id(playlist_url):
    match = re.search(r'playlist/([a-zA-Z0-9]+)', playlist_url)
    if not match:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –ø–ª–µ–π–ª–∏—Å—Ç–∞")
    return match.group(1)


def get_tracks_from_playlist(playlist_url):
    playlist_id = extract_playlist_id(playlist_url)
    track_uris = []
    results = sp.playlist_items(playlist_id)
    track_items = results['items']
    while results['next']:
        results = sp.next(results)
        track_items.extend(results['items'])
    for item in track_items:
        track = item.get('track')
        if track:
            track_uris.append(track['external_urls']['spotify'])
    return track_uris

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ============================
logging.basicConfig(level=logging.INFO)

TELEGRAM_BOT_TOKEN = "7815692651:AAGBWOiEBMbulQOC_-6uvvBl9oF08pn3cJ0"
DB_CONN_STRING = "dbname='server-tg-pisunchik' user='admin' password='Sokoez32' host='localhost'"
DOWNLOAD_DIR = "../downloads"
YOUR_CHAT_ID = -1001294162183  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram chat id

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π: 2 –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 12:00 –∏ 18:00)
MATCHUP_TIMES = ["12:00", "18:00"]

# –ü–ª–µ–π–ª–∏—Å—Ç—ã Spotify –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 12 —Ç—Ä–µ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º)
PLAYLISTS = {
    "Max": "https://open.spotify.com/playlist/6GWIvmFtFQ9ZM7K5rkW3D6?si=fdefb484eaa54b41",
    "Yura": "https://open.spotify.com/playlist/1dAbSSXLOQtchgDEk9fT8n?si=duZs2KIATI6P5y0rR8u1Dw&pi=ovW_dnvHSui0Z",
    "Bogdan": "https://open.spotify.com/playlist/2lG3kJGp3TKf8L2fb85tIi?si=fcX3CtcpQs6jSDv8RxlEDg"
}

song_pools = {}
for friend, playlist_url in PLAYLISTS.items():
    try:
        song_pools[friend] = get_tracks_from_playlist(playlist_url)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è {friend}: {e}")

# ============================
# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ friend
# ============================
def create_pairs(songs):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—ã —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Å–Ω–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä–∏–ª–∏—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ.
    """
    import random

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Å–µ–Ω –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É
    groups = {}
    for song in songs:
        groups.setdefault(song["friend"], []).append(song)

    pairs = []
    remaining_songs = songs.copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω

    while len(remaining_songs) > 1:
        song1 = random.choice(remaining_songs)
        remaining_songs.remove(song1)
        
        # –ò—â–µ–º –ø–µ—Å–Ω—é –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        other_songs = [s for s in remaining_songs if s["friend"] != song1["friend"]]
        
        if other_songs:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Å–Ω–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            song2 = random.choice(other_songs)
        else:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø–µ—Å–Ω–∏ —Ç–æ–≥–æ –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            song2 = random.choice(remaining_songs)
            
        remaining_songs.remove(song2)
        pairs.append((song1, song2))

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –ø–µ—Å–Ω—è, –¥–∞—ë–º –µ–π "–±–∞–π"
    if remaining_songs:
        pairs.append((remaining_songs[0], None))

    return pairs


# ============================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ (Bracket)
# ============================
# –ö–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ ‚Äì —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π, –≥–¥–µ –º–∞—Ç—á = (song1, song2).
# –ï—Å–ª–∏ –º–∞—Ç—á —Å—ã–≥—Ä–∞–Ω, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫:
# [song1, song2, {"winner": winner_song, "vote1": X, "vote2": Y}]
bracket = []           # –°–ø–∏—Å–æ–∫ —Ä–∞—É–Ω–¥–æ–≤
current_round_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
current_matchup_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ –≤ —Ä–∞—É–Ω–¥–µ
active_matchup = None  # –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á

STATE_FILE = "tournament_bracket_state.json"

def save_tournament_state():
    state = {
        "bracket": bracket,
        "current_round_index": current_round_index,
        "current_matchup_index": current_matchup_index
    }
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

def load_tournament_state():
    global bracket, current_round_index, current_matchup_index
    with open(STATE_FILE, "r", encoding="utf-8") as f:
        state = json.load(f)
    bracket = state.get("bracket", [])
    current_round_index = state.get("current_round_index", 0)
    current_matchup_index = state.get("current_matchup_index", 0)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: –†–∞—É–Ω–¥ %d, –º–∞—Ç—á %d", current_round_index+1, current_matchup_index+1)

def initialize_bracket_tournament():
    global bracket, current_round_index, current_matchup_index
    all_songs = []
    for friend, songs in song_pools.items():
        for track_uri in songs:
            all_songs.append({"track_uri": track_uri, "friend": friend})
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é create_pairs –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    first_round = create_pairs(all_songs)
    bracket = [first_round]
    current_round_index = 0
    current_matchup_index = 0
    save_tournament_state()
    bot.send_message(YOUR_CHAT_ID, f"üéâ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω! –†–∞—É–Ω–¥ 1, –ø–∞—Ä: {len(first_round)}.")

# ============================
# –†–∞–±–æ—Ç–∞ —Å –ë–î
# ============================
def init_db():
    conn = psycopg2.connect(DB_CONN_STRING)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS matchups (
        id SERIAL PRIMARY KEY,
        round INTEGER,
        matchup_date TIMESTAMP,
        song1_track_uri TEXT,
        song1_friend TEXT,
        song2_track_uri TEXT,
        song2_friend TEXT,
        song1_votes INTEGER DEFAULT 0,
        song2_votes INTEGER DEFAULT 0,
        winner_track_uri TEXT,
        winner_friend TEXT,
        processed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS votes (
        id SERIAL PRIMARY KEY,
        matchup_id INTEGER REFERENCES matchups(id),
        voter_id TEXT,
        vote INTEGER,
        vote_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    cur.close()
    conn.close()

def insert_matchup_into_db(matchup_data, round_number):
    try:
        conn = psycopg2.connect(DB_CONN_STRING)
        cur = conn.cursor()
        query = """
        INSERT INTO matchups (round, matchup_date, song1_track_uri, song1_friend, song2_track_uri, song2_friend)
        VALUES (%s, %s, %s, %s, %s, %s) RETURNING id;
        """
        matchup_date = datetime.now()
        cur.execute(query, (round_number, matchup_date,
                            matchup_data["song1"]["track_uri"],
                            matchup_data["song1"]["friend"],
                            matchup_data["song2"]["track_uri"],
                            matchup_data["song2"]["friend"]))
        matchup_id = cur.fetchone()[0]
        conn.commit()
        cur.close()
        conn.close()
        logging.info("–ú–∞—Ç—á –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î —Å ID %s", matchup_id)
        return matchup_id
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–∞ –≤ –ë–î: %s", str(e))
        return None

def insert_vote_into_db(matchup_id, voter_id, vote_value):
    try:
        conn = psycopg2.connect(DB_CONN_STRING)
        cur = conn.cursor()
        query = """
        INSERT INTO votes (matchup_id, voter_id, vote)
        VALUES (%s, %s, %s);
        """
        cur.execute(query, (matchup_id, voter_id, int(vote_value)))
        conn.commit()
        cur.close()
        conn.close()
        logging.info("–ì–æ–ª–æ—Å –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –º–∞—Ç—á–∞ %s", matchup_id)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞ –≤ –ë–î: %s", str(e))

def finalize_matchup_in_db(matchup_id, vote1, vote2, winner_song):
    try:
        conn = psycopg2.connect(DB_CONN_STRING)
        cur = conn.cursor()
        query = """
        UPDATE matchups SET song1_votes = %s, song2_votes = %s, winner_track_uri = %s, winner_friend = %s, processed = TRUE
        WHERE id = %s;
        """
        cur.execute(query, (vote1, vote2, winner_song["track_uri"], winner_song["friend"], matchup_id))
        conn.commit()
        cur.close()
        conn.close()
        logging.info("–ú–∞—Ç—á %s –∑–∞–≤–µ—Ä—à—ë–Ω –≤ –ë–î", matchup_id)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ –≤ –ë–î: %s", str(e))

# ============================
# Spotify Download Helper
# ============================
def download_song(track_uri):
    try:
        cmd = ["spotdl", "--output", DOWNLOAD_DIR, track_uri]
        logging.info("–°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Å–Ω—é %s", track_uri)
        result = subprocess.run(cmd, capture_output=True, text=True, encoding="utf-8", errors="replace", timeout=120)
        if result.returncode != 0:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å %s: %s", track_uri, result.stderr)
            return None
        files = os.listdir(DOWNLOAD_DIR)
        if not files:
            return None
        files.sort(key=lambda f: os.path.getctime(os.path.join(DOWNLOAD_DIR, f)), reverse=True)
        file_path = os.path.join(DOWNLOAD_DIR, files[0])
        return file_path
    except Exception as e:
        logging.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ %s: %s", track_uri, str(e))
        return None

def delete_file(file_path):
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
        else:
            logging.warning("–§–∞–π–ª %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω.", file_path)
    except Exception as e:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª %s: %s", file_path, str(e))

# ============================
# Telegram Bot Setup
# ============================
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# ============================
# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–∞—Ç—á–∞ (Bracket)
# ============================
def post_daily_matchup_bracket():
    global current_matchup_index, active_matchup, bracket, current_round_index

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if current_matchup_index >= len(bracket[current_round_index]):
        bot.send_message(YOUR_CHAT_ID, f"–†–∞—É–Ω–¥ {current_round_index+1} –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞...")
        build_next_round()
        return

    matchup = bracket[current_round_index][current_matchup_index]
    # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì –±–∞–π
    if matchup[1] is None:
        bot.send_message(YOUR_CHAT_ID, f"–ü–µ—Å–Ω—è –æ—Ç {matchup[0]['friend']} ({matchup[0]['track_uri']}) –ø–æ–ª—É—á–∞–µ—Ç –±–∞–π –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!")
        record_matchup_result(matchup, winner=matchup[0], vote1=0, vote2=0)
        current_matchup_index += 1
        save_tournament_state()
        post_daily_matchup_bracket()
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    file1 = download_song(matchup[0]["track_uri"])
    file2 = download_song(matchup[1]["track_uri"])
    if file1 is None:
        bot.send_message(YOUR_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –æ—Ç {matchup[0]['friend']}")
        return
    if file2 is None:
        bot.send_message(YOUR_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –æ—Ç {matchup[1]['friend']}")
        delete_file(file1)
        return

    try:
        bot.send_audio(YOUR_CHAT_ID, audio=open(file1, 'rb'))
    except Exception as e:
        bot.send_message(YOUR_CHAT_ID, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–≤–æ–π –ø–µ—Å–Ω–∏: {str(e)}")
        delete_file(file1)
        return
    try:
        bot.send_audio(YOUR_CHAT_ID, audio=open(file2, 'rb'))
    except Exception as e:
        bot.send_message(YOUR_CHAT_ID, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤—Ç–æ—Ä–æ–π –ø–µ—Å–Ω–∏: {str(e)}")
        delete_file(file2)
        return

    delete_file(file1)
    delete_file(file2)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ü–µ—Å–Ω—é 1", callback_data="bracket_vote|1")
    btn2 = types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ü–µ—Å–Ω—é 2", callback_data="bracket_vote|2")
    markup.row(btn1, btn2)

    msg = bot.send_message(YOUR_CHAT_ID,
                           "üé∂ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞:",
                           reply_markup=markup)
    active_matchup = {
        "round": current_round_index + 1,
        "match_index": current_matchup_index,
        "song1": matchup[0],
        "song2": matchup[1],
        "votes": {"1": set(), "2": set()},
        "trivia_msg_id": msg.message_id,
        "chat_id": YOUR_CHAT_ID,
        "reply_markup": markup,
        "matchup_id": insert_matchup_into_db({
            "song1": matchup[0],
            "song2": matchup[1]
        }, current_round_index+1)
    }
    logging.info("–ú–∞—Ç—á –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: %s vs %s", matchup[0]["track_uri"], matchup[1]["track_uri"])

@bot.callback_query_handler(func=lambda call: call.data.startswith("bracket_vote|"))
def handle_bracket_vote(call):
    global active_matchup, current_matchup_index
    if active_matchup is None:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞.")
        return
    parts = call.data.split("|")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return
    vote_value = parts[1]
    voter_id = str(call.from_user.id)
    if voter_id in active_matchup["votes"]["1"] or voter_id in active_matchup["votes"]["2"]:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
        return
    active_matchup["votes"][vote_value].add(voter_id)
    if active_matchup["matchup_id"]:
        insert_vote_into_db(active_matchup["matchup_id"], voter_id, vote_value)
    vote1_count = len(active_matchup["votes"]["1"])
    vote2_count = len(active_matchup["votes"]["2"])
    new_text = f"üé§ –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞:\n–ü–µ—Å–Ω—è 1: {vote1_count}\n–ü–µ—Å–Ω—è 2: {vote2_count}"
    try:
        bot.edit_message_text(new_text,
                              chat_id=active_matchup["chat_id"],
                              message_id=active_matchup["trivia_msg_id"],
                              reply_markup=active_matchup["reply_markup"])
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e))
    bot.answer_callback_query(call.id, "–ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω!")
    total_votes = vote1_count + vote2_count
    if total_votes >= 3:
        finalize_matchup_bracket()


ADMIN_IDS = [741542965]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

@bot.message_handler(commands=['vote_for'])
def vote_for_player(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
        
    try:
        # –§–æ—Ä–º–∞—Ç: /vote_for user_id song_number
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vote_for user_id song_number")
            return
            
        voter_id = parts[1]
        vote_value = parts[2]
        
        if active_matchup is None:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞.")
            return
            
        if voter_id in active_matchup["votes"]["1"] or voter_id in active_matchup["votes"]["2"]:
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª!")
            return
            
        if vote_value not in ["1", "2"]:
            bot.reply_to(message, "‚ùå –ù–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2")
            return
            
        active_matchup["votes"][vote_value].add(voter_id)
        if active_matchup["matchup_id"]:
            insert_vote_into_db(active_matchup["matchup_id"], voter_id, vote_value)
            
        vote1_count = len(active_matchup["votes"]["1"])
        vote2_count = len(active_matchup["votes"]["2"])
        
        new_text = f"üé§ –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞:\n–ü–µ—Å–Ω—è 1: {vote1_count}\n–ü–µ—Å–Ω—è 2: {vote2_count}"
        bot.edit_message_text(new_text,
                            chat_id=active_matchup["chat_id"],
                            message_id=active_matchup["trivia_msg_id"],
                            reply_markup=active_matchup["reply_markup"])
                            
        bot.reply_to(message, f"‚úÖ –ì–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {voter_id} –∑–∞ –ø–µ—Å–Ω—é {vote_value} –∑–∞—Å—á–∏—Ç–∞–Ω!")
        
        total_votes = vote1_count + vote2_count
        if total_votes >= 3:
            finalize_matchup_bracket()
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
def notify_non_voters():
    if active_matchup is None:
        return
        
    # –°–ª–æ–≤–∞—Ä—å —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∏–º–µ–Ω–∞–º–∏ –≤ Telegram
    participants = {
        742272644: "spedymax",
        741542965: "Spatifilum",
        855951767: "lofiSnitch"
    }
    
    
    participants2 = {
        742272644: "–ú–∞–∫—Å",
        741542965: "–Æ—Ä–∞",
        855951767: "–ë–æ–≥–¥–∞–Ω"
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ active_matchup –∏ –µ–≥–æ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not isinstance(active_matchup, dict) or "votes" not in active_matchup:
        return
        
    voted_participants = set().union(
        active_matchup["votes"].get("1", set()),
        active_matchup["votes"].get("2", set())
    )
    non_voters = set(participants.keys()) - voted_participants
    disabled_link=types.LinkPreviewOptions(is_disabled=True)
    if non_voters:
        # –°–æ–∑–¥–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        mention_text = " ".join([f"<a href='https://t.me/{participants[uid]}'>@{participants2[uid]}</a>" for uid in non_voters])
        bot.reply_to(active_matchup["trivia_msg_id"],
                        f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! {mention_text}\n"
                        f"–£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –º–∞—Ç—á–µ!",
                        parse_mode='HTML', link_preview_options=disabled_link)


def finalize_matchup_bracket():
    global active_matchup, current_matchup_index
    if active_matchup is None:
        return
    vote1 = len(active_matchup["votes"]["1"])
    vote2 = len(active_matchup["votes"]["2"])
    if vote1 == vote2:
        bot.send_message(YOUR_CHAT_ID, "–ù–∏—á—å—è! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.")
        active_matchup = None
        return
    winner_vote = "1" if vote1 > vote2 else "2"
    loser_vote = "2" if winner_vote == "1" else "1"
    winner_song = active_matchup["song1"] if winner_vote == "1" else active_matchup["song2"]
    loser_song = active_matchup["song1"] if loser_vote == "1" else active_matchup["song2"]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    file_path = download_song(winner_song["track_uri"])
    if file_path:
        try:
            bot.send_audio(YOUR_CHAT_ID, audio=open(file_path, 'rb'))
            bot.send_message(YOUR_CHAT_ID, f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞ ‚Äì –ø–µ—Å–Ω—è –æ—Ç {winner_song['friend']}!\n–ù–∞–∑–≤–∞–Ω–∏–µ: {winner_song['track_uri']}")
        except Exception as e:
            bot.send_message(YOUR_CHAT_ID, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {str(e)}")
        finally:
            delete_file(file_path)
    else:
        bot.send_message(YOUR_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –æ—Ç {winner_song['friend']}")

    if active_matchup["matchup_id"]:
        finalize_matchup_in_db(active_matchup["matchup_id"], vote1, vote2, winner_song)
    record_matchup_result(bracket[current_round_index][current_matchup_index], winner_song, vote1, vote2)
    active_matchup = None
    current_matchup_index += 1
    save_tournament_state()

def record_matchup_result(matchup, winner, vote1=0, vote2=0):
    matchup_result = {"winner": winner, "vote1": vote1, "vote2": vote2}
    bracket[current_round_index][current_matchup_index] = [matchup[0], matchup[1], matchup_result]

def build_next_round():
    global bracket, current_round_index, current_matchup_index
    winners = []
    for match in bracket[current_round_index]:
        if isinstance(match, list) and len(match) == 3 and "winner" in match[2]:
            winners.append(match[2]["winner"])
    if not winners:
        bot.send_message(YOUR_CHAT_ID, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
        return
    if len(winners) == 1:
        bot.send_message(YOUR_CHAT_ID, f"üèÜ –ß–µ–º–ø–∏–æ–Ω —Ç—É—Ä–Ω–∏—Ä–∞ ‚Äì –ø–µ—Å–Ω—è –æ—Ç {winners[0]['friend']}!")
        if os.path.exists(STATE_FILE):
            os.remove(STATE_FILE)
        initialize_bracket_tournament()
        return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_pairs –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    next_round = create_pairs(winners)
    bracket.append(next_round)
    current_round_index += 1
    current_matchup_index = 0
    save_tournament_state()
    bot.send_message(YOUR_CHAT_ID, f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ {current_round_index+1} —Å {len(next_round)} –º–∞—Ç—á–∞–º–∏.")
    post_daily_matchup_bracket()

# ============================
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–∞ (–±—Ä–µ–∫–µ—Ç–∞)
# ============================
def visualize_bracket():
    visual = ""
    for r_idx, round_matches in enumerate(bracket):
        visual += f"–†–∞—É–Ω–¥ {r_idx+1}:\n"
        for m_idx, match in enumerate(round_matches):
            if isinstance(match, list) and len(match) == 3 and "winner" in match[2]:
                song1 = match[0]
                song2 = match[1]
                winner = match[2]["winner"]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ None
                if song1 is None and song2 is None:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: –ü—É—Å—Ç–æ–π –º–∞—Ç—á\n"
                elif song1 is None:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: –ë–ê–ô vs {song2['friend']} -> –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['friend']}\n"
                elif song2 is None:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: {song1['friend']} (–ë–ê–ô) -> –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['friend']}\n"
                else:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: {song1['friend']} vs {song2['friend']} -> –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['friend']}\n"
            else:
                song1 = match[0]
                song2 = match[1]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ None –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–µ–π
                if song1 is None and song2 is None:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: –ü—É—Å—Ç–æ–π –º–∞—Ç—á\n"
                elif song1 is None:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: –ë–ê–ô vs {song2['friend']}\n"
                elif song2 is None:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: {song1['friend']} -> –ë–ê–ô\n"
                else:
                    visual += f"  –ú–∞—Ç—á {m_idx+1}: {song1['friend']} vs {song2['friend']} -> (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ)\n"
        visual += "\n"
    return visual

@bot.message_handler(commands=['bracket'])
def show_bracket(message):
    bracket_visual = visualize_bracket()
    bot.reply_to(message, f"–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n{bracket_visual}")

# ============================
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º
# ============================
@bot.message_handler(commands=['start_tournament'])
def cmd_start_tournament(message):
    if os.path.exists(STATE_FILE):
        load_tournament_state()
        bot.send_message(MAX_ID, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—É—Ä–Ω–∏—Ä!")
        post_daily_matchup_bracket()
    else:
        initialize_bracket_tournament()

@bot.message_handler(func=lambda message: message.text.lower() in ["–Ω–æ–≤—ã–π", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
def handle_tournament_choice(message):
    if message.text.lower() == "–Ω–æ–≤—ã–π":
        initialize_bracket_tournament()
        bot.reply_to(message, "–ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä!")
    elif message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        load_tournament_state()
        bot.reply_to(message, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç—É—Ä–Ω–∏—Ä!")
        post_daily_matchup_bracket()

@bot.message_handler(commands=['manual_matchup'])
def manual_matchup(message):
    post_daily_matchup_bracket()
    bot.reply_to(message, "–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –º–∞—Ç—á–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ")

# ============================
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–µ–π ‚Äì 2 –≤ –¥–µ–Ω—å
# ============================
scheduler = BackgroundScheduler()

def schedule_daily_matchups():
    now = datetime.now()
    for t in MATCHUP_TIMES:
        target_time = datetime.strptime(t, "%H:%M").replace(year=now.year, month=now.month, day=now.day)
        if now > target_time:
            target_time += timedelta(days=1)
        scheduler.add_job(post_daily_matchup_bracket, 'interval', days=1, next_run_time=target_time)
        logging.info("–ú–∞—Ç—á –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ %s (—á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥)", t, int((target_time - now).total_seconds()))

def schedule_reminder_before_matchup():
    for t in MATCHUP_TIMES:
        reminder_time = datetime.strptime(t, "%H:%M") - timedelta(minutes=30)
        reminder_time = reminder_time.strftime("%H:%M")
        scheduler.add_job(notify_non_voters, 'cron', hour=reminder_time.split(":")[0], 
                        minute=reminder_time.split(":")[1])


# ============================
# –û—Å–Ω–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
# ============================

if __name__ == "__main__":
    if not os.path.exists(DOWNLOAD_DIR):
        os.makedirs(DOWNLOAD_DIR)
    init_db()
    if os.path.exists(STATE_FILE):
        load_tournament_state()
        post_daily_matchup_bracket()
    else:
        initialize_bracket_tournament()
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if not scheduler.get_jobs():
        schedule_daily_matchups()
        schedule_reminder_before_matchup()
    
    scheduler.start()
    bot.infinity_polling()
